    <h1>posts#new</h1>
    <%= form_for @post do |f| %>
    <div class="field">
        <%= f.label :title %>
        <p><%= f.text_field :title, :size => 20 %></p>
        <%= f.label :maplink,"mapのURL" %>
        <p><%= f.text_field :maplink %></p>
        <%= f.label :contents %>
        <p><%= f.text_field :contents, :size => 20 %></p>

        <%= f.label :lat,"緯度" %>
        <%= f.text_field :lat,:value =>0, id: :lat ,placeholder:"緯度" %>
        <%= f.label :lng,"経度" %>
        <%= f.text_field :lng,:value =>0, id: :lng ,placeholder:"経度" %>
    </div>
    <%= f.submit "postする" %>
    <% end %>
    <%= link_to "post一覧に戻る", posts_path %>


    <input id="address" type="textbox" placeholder="検索する">
    <input type="button" value="検索" onclick="codeAddress()">
    <p>マーカーをドラック＆ドロップで位置の調整ができます。<p>
    <hr>
    <input type="text" id="hospital-search" placeholder="病院を検索">
    <button onclick="searchHospitals()">病院を検索</button>

    <div id='map'></div>
    <style>
        #map{
            height:400px;
            width:400px;
        }
    </style>
    <script>
        //初期マップの設定
        let map;
        let marker;
        function initMap(){
        geocoder = new google.maps.Geocoder()
        navigator.geolocation.getCurrentPosition(function (position) {
        CurrentPosition = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
            map = new google.maps.Map(document.getElementById('map'), {
                center:  CurrentPosition,  //現在地
                zoom: 15,
            });
        });
        }
        let hospitalMarkers = []; // 病院のマーカーを格納する配列

        // 病院を検索する関数
        function searchHospitals() {
        const map = new google.maps.Map(document.getElementById('map'));
        const input = document.getElementById('hospital-search');
        const request = {
            location: map.getCenter(),
            radius: 5000, // 検索範囲を設定（メートル単位）
            keyword: input.value,
            type: 'hospital'
        };

        const service = new google.maps.places.PlacesService(map);
        service.nearbySearch(request, (results, status) => {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
            // 以前のマーカーを削除
            clearHospitalMarkers();
            
            for (let i = 0; i < results.length; i++) {
                const hospital = results[i];
                createHospitalMarker(hospital);
            }
            }
        });
        }

        // 病院のマーカーを作成する関数
        function createHospitalMarker(place) {
        const marker = new google.maps.Marker({
            map: map,
            position: place.geometry.location,
            title: place.name
        });
        hospitalMarkers.push(marker);
        }

        // 以前の病院マーカーを削除する関数
        function clearHospitalMarkers() {
        for (let i = 0; i < hospitalMarkers.length; i++) {
            hospitalMarkers[i].setMap(null);
        }
        hospitalMarkers = [];
        }
        //検索後のマップ作成
        let geocoder
        let aft
        function codeAddress(){
        let inputAddress = document.getElementById('address').value;
        geocoder.geocode( { 'address': inputAddress}, function(results, status) {
            if (status == 'OK') {
                //マーカーが複数できないようにする
                if (aft == true){
                    marker.setMap(null);
                }

                //新しくマーカーを作成する
                map.setCenter(results[0].geometry.location);
                    marker = new google.maps.Marker({
                    map: map,
                    position: results[0].geometry.location,
                    draggable: true,// ドラッグ可能にする
                });

                //二度目以降か判断
                aft = true

                //検索した時に緯度経度を入力する
                document.getElementById('lat').value = results[0].geometry.location.lat();
                document.getElementById('lng').value = results[0].geometry.location.lng();

                // マーカーのドロップ（ドラッグ終了）時のイベント
                google.maps.event.addListener( marker, 'dragend', function(ev){
                    // イベントの引数evの、プロパティ.latLngが緯度経度
                    document.getElementById('lat').value = ev.latLng.lat();
                    document.getElementById('lng').value = ev.latLng.lng();
                });
            } else {
            alert('該当する結果がありませんでした：' + status);
            }
        });   
        }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>&libraries=places&callback=initMap" async defer></script>