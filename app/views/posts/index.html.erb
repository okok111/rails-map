<h1>posts#index</h1>
<%= link_to "新規投稿へ", new_post_path %>
<div class="posts-container">
    <% @posts.each do |t| %>
        <div class="post">
            <p><a href="/users/<%= t.user.id %>"><%= t.user.name %></a></p>
            <p><%= t.title %></p>
            <p><%= t.maplink.html_safe %></p>
            <!--
                <p>
                    <% if t.image.present? %>
                        <%= image_tag t.image_url, size: '250x200'%>
                    <% else %>
                        <%= image_tag "nonono.png", size: '250x200' %>
                    <% end %>
                </p>
            -->
            <!--
                <% if user_signed_in? %>
                    <% if current_user.already_liked?(t) %>
                        <%= link_to post_like_path(id: t.id, post_id: t.id), method: :delete do %>
                            <i class="fas fa-heart fa-2x"></i><%= t.likes.count %>
                        <% end %>
                    <% else %>
                        <%= link_to post_likes_path(id: t.id, post_id: t.id), method: :post do %>
                            <i class="far fa-heart fa-2x"></i><%= t.likes.count %>
                        <% end %>
                    <% end %>
                <% else %>
                    <i class="far fa-heart fa-2x"></i><%= t.likes.count %>
                <% end %>
            -->
            <p><%= t.contents %></p>
            <%= link_to "詳細へ", post_path(t.id) %>
            <% if user_signed_in? %>
                <%= link_to "編集する", edit_post_path(t.id) %>
                <%= link_to "削除する", post_path(t.id), method: :delete %>
            <% end %>
        </div>
    <% end %>
</div>

<div id="location1"></div>
<div id="location2"></div>
<button id="searchButton">検索</button>
<div id='map'></div>

<style>
#map {
  height: 600px;
  width: 100%;
}
</style>

<!-- js部分 -->
<script>
    let selectedMarkers = [];
    let map;
    let markers = [];

      function setupMarkerButton(marker, markerLatLng) {
        let addButton = document.createElement('button');
        addButton.innerText = '追加';

        addButton.addEventListener('click', function() {
            console.log("1"); 
            if (selectedMarkers.length < 2) {
                selectedMarkers.push(markerLatLng);
                console.log("1"); 
                marker.setIcon('https://maps.google.com/mapfiles/ms/icons/green-dot.png');
                if (selectedMarkers.length === 1) {
                    let l1 =document.getElementById('location1');
                    l1.innerText = marker.getTitle();

                } else if (selectedMarkers.length === 2) {
                    let l2 = document.getElementById('location2');
                    l2.innerText = marker.getTitle();
                }
            }
            if (selectedMarkers.length === 2) {
                calculateDistanceAndTime(selectedMarkers[0], selectedMarkers[1]);
            }
        });
        return addButton;
    }

    function initMap() {

      //初期表示位置
      let latlng = new google.maps.LatLng(38.60, 139.5);
      //デザイン
      let styles = [
           {
            stylers: [
             { "saturation": 0 },
             { "lightness": 0 }
            ]
           }
          ];

      map = new google.maps.Map(document.getElementById('map'), {
          zoom: 5.5,
          styles: styles,
          center: latlng
      });
      let transitLayer = new google.maps.TransitLayer();
      transitLayer.setMap(map);

    //複数マーカー ここから
      <% @posts.each do |post|%>
        ( function() { 
            let markerLatLng = { lat: <%= post.lat %>, lng: <%= post.lng %> }; // 緯度経度のデータ作成
            let marker = new google.maps.Marker({ 
                position: markerLatLng, 
                map: map 
            });
            // 追加ボタンを追加
            let addButton = document.createElement('button');
            addButton.innerText = '追加';
            let infowindowContent = document.createElement('div');
            infowindowContent.appendChild(document.createElement('br')); // 必要に応じて改行を追加
            infowindowContent.appendChild(addButton);
            infowindowContent.appendChild(document.createElement('br')); // 必要に応じて改行を追加
            infowindowContent.innerHTML += "<a href='<%= post_url(post.id) %>' target='_blank'><%= post.title %></a>";
            
             //マーカーをクリックしたとき、詳細情報を表示
            let infowindow = new google.maps.InfoWindow({
                position: markerLatLng,
                content: infowindowContent
            }); 
            //ここで詳細ページへのリンクを表示させる
            marker.addListener('click', function() {
                infowindow.open(map, marker);
            });
       })();
      <% end %>
        
        // 検索ボタンがクリックされたときの処理を追加
        document.getElementById('searchButton').addEventListener('click', function() {
            if (selectedMarkers.length === 2) {
                let marker1LatLng = selectedMarkers[0];
                let marker2LatLng = selectedMarkers[1];
                calculateDistanceAndTime(marker1LatLng, marker2LatLng);
            } else {
                alert('2か所の場所を選択してください。');
            }
        });
    }
    

    function calculateDistanceAndTime(marker1, marker2) {
      let service = new google.maps.DistanceMatrixService();
      service.getDistanceMatrix({
        origins: [marker1],
        destinations: [marker2],
        travelMode: 'DRIVING',
        unitSystem: google.maps.UnitSystem.METRIC,
      }, function(response, status) {
        if (status === 'OK') {
            let distance = response.rows[0].elements[0].distance.text;
            let duration = response.rows[0].elements[0].duration.text;
            alert(`距離: ${distance}\n所要時間: ${duration}`);
            // マーカー選択情報をクリア
            selectedMarkers = [];
            let directionsService = new google.maps.DirectionsService();
            let directionsRenderer = new google.maps.DirectionsRenderer();
            directionsRenderer.setMap(map);

            let request = {
                origin: marker1,
                destination: marker2,
                travelMode: google.maps.TravelMode.DRIVING,
            };
            directionsService.route(request, function(result, status) {
                if (status === 'OK') {
                    directionsRenderer.setDirections(result);
                } else {
                    alert('ルートを表示できませんでした。');
                }
            });
        } else {
            alert('距離と所要時間を計算できませんでした。');
        }
    });
    
    }
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>&callback=initMap" async defer></script>